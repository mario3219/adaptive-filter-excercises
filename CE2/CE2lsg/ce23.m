% computer exercise 2.3, ASB 2003%% tmr%% eigenvalue spreadW=3.1;% filter lengthM=11;% channelh=[0 0.5*(1+cos(2*pi/W*((1:3)-2))) 0];% variance of the additive noisesigmav2=0.001;% length of the signalN=1500;% ensemble size for learning curveNbr=200;% step size of the LMSmu=0.025;% ensemble loope=zeros(Nbr,N);w=zeros(Nbr,M);fprintf('\n');for nbr=1:Nbr fprintf('realization: %d\n',nbr); % generate Bernoulli sequence of length N x=2*round(rand(N,1))-1; % convolute input signal x with the channel h y=conv(x,h); % cut the result to length N y=y(1:N); % add Gaussian noise u=y+sqrt(sigmav2)*randn(length(y),1); % delay x(n): d(n)=x(n-7) d=[zeros(7,1);x]; % LMS [etmp,wtmp]=lms(mu,M,u,d); e(nbr,:)=etmp.'; w(nbr,:)=wtmp(:).';end; % nbr% learning curvefigure; J=mean(e.^2); semilogy(J); zoom on grid on xlabel('iteration n'); ylabel(sprintf('mean(J(n)), %d realizations',Nbr)); title('CE 2.3');% mean filter coefficientsfigure; stem(mean(w)); hold on zoom on grid on xlabel('coefficient no.'); ylabel('amplitude'); title('CE 2.3');figure subplot(1,2,1) zplane(h,1); axis square axis([-4,4,-4,4]); title('zeros of channel'); subplot(1,2,2) zplane(mean(w),1); axis square axis([-4,4,-4,4]); title('zeros of equalizer filter'); title('CE 2.3');